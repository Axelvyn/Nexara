generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String?  @unique
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  isActive     Boolean  @default(true) @map("is_active")

  // reverse relation to Project
  projects Project[]
  // reverse relation to Issues
  assignedIssues Issue[] @relation("IssueAssignee")
  reportedIssues Issue[] @relation("IssueReporter")
  // reverse relation to ProjectMembers
  projectMembers ProjectMember[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  boards      Board[]
  members     ProjectMember[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("projects")
}

model Board {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  name        String
  description String?
  columns     Column[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("boards")
}

model Column {
  id         String   @id @default(cuid())
  boardId    String
  board      Board    @relation(fields: [boardId], references: [id])
  name       String
  orderIndex Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  issues     Issue[]

  @@map("columns")
}

model Issue {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        IssueType @default(TASK)
  priority    Priority @default(MEDIUM)
  status      IssueStatus @default(TODO)
  columnId    String
  column      Column   @relation(fields: [columnId], references: [id])
  assigneeId  String?
  assignee    User?    @relation(fields: [assigneeId], references: [id])
  reporterId  String
  reporter    User     @relation(fields: [reporterId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("issues")
}

enum IssueType {
  BUG
  FEATURE
  TASK
  STORY
  EPIC
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(VIEWER)
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

enum ProjectRole {
  OWNER       // Full access to everything
  ADMIN       // Can manage project settings, members, boards
  DEVELOPER   // Can create/edit issues, move between columns
  VIEWER      // Read-only access
}
