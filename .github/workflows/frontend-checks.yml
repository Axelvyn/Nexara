name: Frontend Checks

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-checks.yml'
  pull_request_target:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-checks.yml'
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-checks.yml'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to process'
        required: false
      triggered_by:
        description: 'User who triggered this workflow'
        required: false

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  frontend-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check formatting with Prettier
        run: |
          # Check if prettier config exists, if not create a basic one
          if [ ! -f .prettierrc ]; then
            echo '{
              "semi": true,
              "trailingComma": "es5",
              "singleQuote": true,
              "printWidth": 80,
              "tabWidth": 2
            }' > .prettierrc
          fi
          
          # Install prettier if not already in package.json
          if ! npm list prettier --depth=0 > /dev/null 2>&1; then
            npm install --no-save prettier
          fi
          
          # Check formatting
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"
      
      - name: Run ESLint
        run: |
          # Check if ESLint is configured
          if [ -f .eslintrc.json ] || [ -f .eslintrc.js ] || [ -f eslint.config.js ]; then
            npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0
          else
            echo "⚠️ ESLint configuration not found. Skipping lint check."
            echo "Consider adding ESLint configuration for better code quality."
          fi
      
      - name: Type checking (TypeScript)
        run: |
          # Run TypeScript type checking
          npx tsc --noEmit
      
      - name: Run tests (if available)
        run: |
          # Check if test script exists in package.json
          if npm run test --dry-run > /dev/null 2>&1; then
            npm run test -- --watchAll=false --coverage=false
          else
            echo "⚠️ No test script found. Consider adding tests for better code quality."
          fi
      
      - name: Build application
        run: |
          # Build the Next.js application
          npm run build
      
      - name: Check build artifacts
        run: |
          # Verify that build was successful and artifacts exist
          if [ -d ".next" ]; then
            echo "✅ Build completed successfully"
            echo "Build size summary:"
            du -sh .next
          else
            echo "❌ Build failed - .next directory not found"
            exit 1
          fi

  comment-on-pr:
    runs-on: ubuntu-latest
    needs: frontend-checks
    if: github.event_name == 'pull_request_target' && needs.frontend-checks.result == 'failure'
    steps:
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `❌ **Frontend checks failed!**\n  \n  Please fix the following issues:\n  - Check formatting with Prettier\n  - Fix any ESLint errors\n  - Resolve TypeScript type errors\n  - Fix any failing tests\n  - Ensure the build completes successfully\n  \n  You can run these checks locally:\n  \`\`\`bash\n  cd frontend\n  npm run build\n  npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"\n  npx eslint . --ext .js,.jsx,.ts,.tsx\n  npx tsc --noEmit\n  \`\`\`\n  `
            });
