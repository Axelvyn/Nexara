name: Merge PR

on:
  repository_dispatch:
    types: [merge-command]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Merge pull request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if this is a valid slash command dispatch event
            if (!context.payload || !context.payload.client_payload) {
              console.log('❌ This workflow should only be triggered by repository dispatch events');
              core.setFailed('Invalid event trigger - expected repository dispatch');
              return;
            }
            
            // Debug: Log the full client payload structure
            console.log('Client payload structure:', JSON.stringify(context.payload.client_payload, null, 2));
            
            // Get the actor from the comment author (the person who triggered the slash command)
            const actor = context.payload.client_payload.github.payload.comment.user.login;
            const command = context.payload.client_payload.slash_command.command;
            
            console.log('✅ Slash command detected');
            console.log('Command:', command);
            console.log('Actor:', actor);
            
            // Verify we have all required data
            if (!actor) {
              console.log('❌ Could not determine actor from payload');
              core.setFailed('Missing actor information');
              return;
            }
            
            // Get issue data from the repository dispatch event
            const issue = context.payload.client_payload.github.payload.issue;
            const issueNumber = issue.number;
            
            if (!issue || !issueNumber) {
              console.log('❌ Could not determine issue information');
              core.setFailed('Missing issue information');
              return;
            }
            
            // Simple authorization check - allow Va16hav07 and Pranjal6955
            const authorizedUsers = ['Va16hav07', 'Pranjal6955'];
            if (!authorizedUsers.includes(actor)) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `❌ @${actor}, you are not authorized to merge. Only ${authorizedUsers.join(' and ')} can use the /merge command.`
              });
              core.setFailed(`User ${actor} is not authorized to merge.`);
              return;
            }
            
            if (!issue.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `❌ The /merge command can only be used on pull requests.`
              });
              core.setFailed('Not a pull request');
              return;
            }
            
            const prNumber = issueNumber;
            
            // Check PR status before attempting to merge
            try {
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              console.log('PR Status:', pr.data.state);
              console.log('Mergeable:', pr.data.mergeable);
              console.log('Mergeable State:', pr.data.mergeable_state);
              
              // Check if PR is in a mergeable state
              if (pr.data.state !== 'open') {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `❌ Cannot merge: Pull request is ${pr.data.state}. Only open pull requests can be merged.`
                });
                core.setFailed(`PR is ${pr.data.state}`);
                return;
              }
              
              // Check mergeable state
              if (pr.data.mergeable === false) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `❌ Cannot merge: Pull request has conflicts that need to be resolved.`
                });
                core.setFailed('PR has conflicts');
                return;
              }
              
              if (pr.data.mergeable_state === 'blocked') {
                // Get more details about what's blocking the merge
                const reviews = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                
                const requestedReviews = await github.rest.pulls.listRequestedReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                
                let blockingIssues = [];
                
                // Check for pending reviews
                if (requestedReviews.data.users && requestedReviews.data.users.length > 0) {
                  const pendingReviewers = requestedReviews.data.users.map(user => user.login).join(', ');
                  blockingIssues.push(`Pending reviews from: ${pendingReviewers}`);
                }
                
                // Check for review comments requesting changes
                const changeRequests = reviews.data.filter(review => review.state === 'CHANGES_REQUESTED');
                if (changeRequests.length > 0) {
                  const reviewers = changeRequests.map(review => review.user.login).join(', ');
                  blockingIssues.push(`Changes requested by: ${reviewers}`);
                }
                
                const errorMessage = blockingIssues.length > 0 
                  ? `❌ Cannot merge: ${blockingIssues.join('. ')}`
                  : '❌ Cannot merge: Pull request is blocked by repository rules.';
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: errorMessage
                });
                core.setFailed('PR is blocked');
                return;
              }
              
            } catch (error) {
              console.log('Error checking PR status:', error.message);
              // Continue with merge attempt even if status check fails
            }
            
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'merge'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `✅ Pull request merged successfully by @${actor}.`
              });
            } catch (error) {
              console.log('Merge error:', error.message);
              
              let errorMessage = `❌ Failed to merge pull request: ${error.message}`;
              
              // Provide more helpful error messages for common issues
              if (error.message.includes('Repository rule violations found')) {
                errorMessage = `❌ Cannot merge: Repository rules are blocking this merge. This could be due to:
                - Pending review requests
                - Required status checks not passing
                - Branch protection rules
                
                Please ensure all required reviews are completed and status checks are passing.`;
              } else if (error.message.includes('mergeable')) {
                errorMessage = `❌ Cannot merge: Pull request has conflicts or is not in a mergeable state. Please resolve any conflicts and try again.`;
              }
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: errorMessage
              });
              core.setFailed(error.message);
            }
