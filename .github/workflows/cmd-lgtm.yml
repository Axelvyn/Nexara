name: LGTM Command

on:
  repository_dispatch:
    types: [lgtm-command]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  lgtm:
    runs-on: ubuntu-latest
    steps:
      - name: LGTM pull request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if this is a valid slash command dispatch event
            if (!context.payload || !context.payload.client_payload) {
              console.log('‚ùå This workflow should only be triggered by repository dispatch events');
              core.setFailed('Invalid event trigger - expected repository dispatch');
              return;
            }
            
            // Debug: Log the full client payload structure
            console.log('Client payload structure:', JSON.stringify(context.payload.client_payload, null, 2));
            
            // Get the actor from the comment author (the person who triggered the slash command)
            const actor = context.payload.client_payload.github.payload.comment.user.login;
            const command = context.payload.client_payload.slash_command.command;
            const argsObject = context.payload.client_payload.slash_command.args || {};
            
            // Convert args object to array for compatibility
            const args = argsObject.all ? argsObject.all.trim().split(/\s+/).filter(Boolean) : [];
            
            console.log('‚úÖ Slash command detected');
            console.log('Command:', command);
            console.log('Actor:', actor);
            console.log('Args object:', argsObject);
            console.log('Args array:', args);
            
            // Authorization check - get authorized users list
            const authorizedUsers = ['Va16hav07', 'Pranjal6955'];
            
            // Verify we have all required data
            if (!actor) {
              console.log('‚ùå Could not determine actor from payload');
              core.setFailed('Missing actor information');
              return;
            }
            
            // Get issue data from the repository dispatch event
            const issue = context.payload.client_payload.github.payload.issue;
            const issueNumber = issue.number;
            
            if (!issue || !issueNumber) {
              console.log('‚ùå Could not determine issue information');
              core.setFailed('Missing issue information');
              return;
            }
            
            // Check if this is a pull request
            if (!issue.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `‚ùå The /lgtm command can only be used on pull requests.`
              });
              core.setFailed('Not a pull request');
              return;
            }
            
            const prNumber = issueNumber;
            
            try {
              // Check if the PR is still open
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              if (pr.data.state !== 'open') {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `‚ùå Cannot LGTM: Pull request is ${pr.data.state}.`
                });
                core.setFailed(`PR is ${pr.data.state}`);
                return;
              }
              
              // Allow self-LGTM for authorized users
              if (pr.data.user.login === actor && !authorizedUsers.includes(actor)) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `‚ùå @${actor}, you cannot LGTM your own pull request unless you are a repository owner.`
                });
                core.setFailed('Cannot self-LGTM');
                return;
              }
              
              // Get optional review message from args
              const reviewMessage = args.length > 0 
                ? args.join(' ')
                : 'üëç LGTM (Looks Good To Me)';
              
              // Submit an approving review
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE',
                body: reviewMessage
              });
              
              // Add a comment confirming the action
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `üëç @${actor} says LGTM!`
              });
              
              console.log(`‚úÖ Successfully LGTM'd PR #${prNumber} by ${actor}`);
              
            } catch (error) {
              console.log('LGTM error:', error.message);
              
              let errorMessage = `‚ùå Failed to LGTM pull request: ${error.message}`;
              
              // Handle specific error cases
              if (error.message.includes('duplicate')) {
                errorMessage = `‚ùå @${actor}, you have already reviewed this pull request.`;
              } else if (error.message.includes('permission')) {
                errorMessage = `‚ùå @${actor}, you don't have permission to review this pull request.`;
              } else if (error.status === 422 && error.message.includes('review')) {
                // Try to check if user already has a pending review
                try {
                  const reviews = await github.rest.pulls.listReviews({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber
                  });
                  
                  const userReviews = reviews.data.filter(review => review.user.login === actor);
                  const latestReview = userReviews[userReviews.length - 1];
                  
                  if (latestReview && latestReview.state === 'APPROVED') {
                    errorMessage = `‚ùå @${actor}, you have already approved this pull request.`;
                  }
                } catch (reviewCheckError) {
                  console.log('Error checking existing reviews:', reviewCheckError.message);
                }
              }
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: errorMessage
              });
              core.setFailed(error.message);
            }
