name: Approve Command

on:
  repository_dispatch:
    types: [approve-command]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  approve:
    runs-on: ubuntu-latest
    steps:
      - name: Approve pull request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Helper function to close linked issues
            async function closeLinkedIssues(github, owner, repo, prNumber, actor) {
              try {
                console.log(`Looking for linked issues in PR #${prNumber}...`);
                
                // Get PR details to access body and title
                const pr = await github.rest.pulls.get({
                  owner: owner,
                  repo: repo,
                  pull_number: prNumber
                });
                
                const prBody = pr.data.body || '';
                const prTitle = pr.data.title || '';
                
                // Look for issue references in PR body and title
                // Common patterns: "Closes #123", "Fixes #123", "Resolves #123", etc.
                const issuePatterns = [
                  /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi,
                  /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+(?:https?:\/\/github\.com\/[^\/]+\/[^\/]+\/issues\/)(\d+)/gi
                ];
                
                const linkedIssues = new Set();
                
                // Search in PR body
                for (const pattern of issuePatterns) {
                  let match;
                  while ((match = pattern.exec(prBody)) !== null) {
                    linkedIssues.add(parseInt(match[1]));
                  }
                }
                
                // Search in PR title
                for (const pattern of issuePatterns) {
                  let match;
                  while ((match = pattern.exec(prTitle)) !== null) {
                    linkedIssues.add(parseInt(match[1]));
                  }
                }
                
                // Get all commits and check their messages too
                const commits = await github.rest.pulls.listCommits({
                  owner: owner,
                  repo: repo,
                  pull_number: prNumber
                });
                
                for (const commit of commits.data) {
                  const commitMessage = commit.commit.message || '';
                  for (const pattern of issuePatterns) {
                    let match;
                    while ((match = pattern.exec(commitMessage)) !== null) {
                      linkedIssues.add(parseInt(match[1]));
                    }
                  }
                }
                
                console.log(`Found ${linkedIssues.size} linked issues:`, Array.from(linkedIssues));
                
                // Close each linked issue
                for (const issueNumber of linkedIssues) {
                  try {
                    // Check if issue exists and is open
                    const issue = await github.rest.issues.get({
                      owner: owner,
                      repo: repo,
                      issue_number: issueNumber
                    });
                    
                    if (issue.data.state === 'open') {
                      await github.rest.issues.update({
                        owner: owner,
                        repo: repo,
                        issue_number: issueNumber,
                        state: 'closed'
                      });
                      
                      await github.rest.issues.createComment({
                        owner: owner,
                        repo: repo,
                        issue_number: issueNumber,
                        body: `🎉 This issue was automatically closed by merging PR #${prNumber} via /approve command by @${actor}.`
                      });
                      
                      console.log(`✅ Closed issue #${issueNumber}`);
                    } else {
                      console.log(`ℹ️ Issue #${issueNumber} is already ${issue.data.state}`);
                    }
                  } catch (error) {
                    console.log(`⚠️ Could not close issue #${issueNumber}:`, error.message);
                  }
                }
                
                if (linkedIssues.size > 0) {
                  await github.rest.issues.createComment({
                    owner: owner,
                    repo: repo,
                    issue_number: prNumber,
                    body: `🔗 Automatically closed ${linkedIssues.size} linked issue(s): ${Array.from(linkedIssues).map(n => `#${n}`).join(', ')}`
                  });
                }
                
              } catch (error) {
                console.log('Error closing linked issues:', error.message);
              }
            }
            
            // Check if this is a valid slash command dispatch event
            if (!context.payload || !context.payload.client_payload) {
              console.log('❌ This workflow should only be triggered by repository dispatch events');
              core.setFailed('Invalid event trigger - expected repository dispatch');
              return;
            }
            
            // Debug: Log the full client payload structure
            console.log('Client payload structure:', JSON.stringify(context.payload.client_payload, null, 2));
            
            // Get the actor from the comment author (the person who triggered the slash command)
            const actor = context.payload.client_payload.github.payload.comment.user.login;
            const command = context.payload.client_payload.slash_command.command;
            const argsObject = context.payload.client_payload.slash_command.args || {};
            
            // Convert args object to array for compatibility
            const args = argsObject.all ? argsObject.all.trim().split(/\s+/).filter(Boolean) : [];
            
            console.log('✅ Slash command detected');
            console.log('Command:', command);
            console.log('Actor:', actor);
            console.log('Args object:', argsObject);
            console.log('Args array:', args);
            
            // Verify we have all required data
            if (!actor) {
              console.log('❌ Could not determine actor from payload');
              core.setFailed('Missing actor information');
              return;
            }
            
            // Authorization check - only allow repository owners
            const authorizedUsers = ['Va16hav07', 'Pranjal6955'];
            if (!authorizedUsers.includes(actor)) {
              console.log(`❌ Unauthorized user: ${actor}`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.client_payload.github.payload.issue.number,
                body: `❌ @${actor}, only repository owners can use the /approve command.`
              });
              core.setFailed('Unauthorized user');
              return;
            }
            
            // Get issue data from the repository dispatch event
            const issue = context.payload.client_payload.github.payload.issue;
            const issueNumber = issue.number;
            
            if (!issue || !issueNumber) {
              console.log('❌ Could not determine issue information');
              core.setFailed('Missing issue information');
              return;
            }
            
            // Check if this is a pull request
            if (!issue.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `❌ The /approve command can only be used on pull requests.`
              });
              core.setFailed('Not a pull request');
              return;
            }
            
            const prNumber = issueNumber;
            
            try {
              // Check if the PR is still open
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              if (pr.data.state !== 'open') {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `❌ Cannot approve: Pull request is ${pr.data.state}.`
                });
                core.setFailed(`PR is ${pr.data.state}`);
                return;
              }
              
              // Allow self-approval for authorized users
              if (pr.data.user.login === actor && !authorizedUsers.includes(actor)) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `❌ @${actor}, you cannot approve your own pull request unless you are a repository owner.`
                });
                core.setFailed('Cannot self-approve');
                return;
              }
              
              // Get optional review message from args
              const reviewMessage = args.length > 0 
                ? args.join(' ')
                : '✅ Approved via slash command';
              
              // Submit an approving review
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE',
                body: reviewMessage
              });
              
              // Add a comment confirming the action
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `✅ @${actor} approved this pull request.`
              });
              
              console.log(`✅ Successfully approved PR #${prNumber} by ${actor}`);
              
              // Check if we should auto-merge after approval
              const shouldAutoMerge = args.some(arg => arg.toLowerCase().includes('merge')) || 
                                    reviewMessage.toLowerCase().includes('merge');
              
              if (shouldAutoMerge) {
                console.log('🔄 Auto-merge requested, attempting to merge PR...');
                
                // Simple authorization check for merge - allow Va16hav07 and Pranjal6955
                const authorizedUsers = ['Va16hav07', 'Pranjal6955'];
                if (!authorizedUsers.includes(actor)) {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: `⚠️ @${actor}, you approved the PR but only ${authorizedUsers.join(' and ')} can auto-merge. Please ask them to merge or use the /merge command.`
                  });
                  return;
                }
                
                try {
                  // Refresh PR data to check current mergeable state
                  const updatedPr = await github.rest.pulls.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber
                  });
                  
                  console.log('PR Mergeable:', updatedPr.data.mergeable);
                  console.log('Mergeable State:', updatedPr.data.mergeable_state);
                  
                  // Check if PR is in a mergeable state
                  if (updatedPr.data.mergeable === false) {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: prNumber,
                      body: `❌ Cannot auto-merge: Pull request has conflicts that need to be resolved.`
                    });
                    return;
                  }
                  
                  if (updatedPr.data.mergeable_state === 'blocked') {
                    // Get more details about what's blocking the merge
                    const reviews = await github.rest.pulls.listReviews({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: prNumber
                    });
                    
                    const requestedReviews = await github.rest.pulls.listRequestedReviewers({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: prNumber
                    });
                    
                    let blockingIssues = [];
                    
                    // Check for pending reviews
                    if (requestedReviews.data.users && requestedReviews.data.users.length > 0) {
                      const pendingReviewers = requestedReviews.data.users.map(user => user.login).join(', ');
                      blockingIssues.push(`Pending reviews from: ${pendingReviewers}`);
                    }
                    
                    // Check for review comments requesting changes
                    const changeRequests = reviews.data.filter(review => review.state === 'CHANGES_REQUESTED');
                    if (changeRequests.length > 0) {
                      const reviewers = changeRequests.map(review => review.user.login).join(', ');
                      blockingIssues.push(`Changes requested by: ${reviewers}`);
                    }
                    
                    const errorMessage = blockingIssues.length > 0 
                      ? `❌ Cannot auto-merge: ${blockingIssues.join('. ')}`
                      : '❌ Cannot auto-merge: Pull request is blocked by repository rules.';
                    
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: prNumber,
                      body: errorMessage
                    });
                    return;
                  }
                  
                  // Attempt to merge
                  await github.rest.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber,
                    merge_method: 'merge'
                  });
                  
                  // Close linked issues after successful auto-merge
                  await closeLinkedIssues(github, context.repo.owner, context.repo.repo, prNumber, actor);
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: `🎉 Pull request approved and automatically merged by @${actor}.`
                  });
                  
                  console.log(`✅ Successfully auto-merged PR #${prNumber} after approval`);
                  
                } catch (mergeError) {
                  console.log('Auto-merge error:', mergeError.message);
                  
                  let mergeErrorMessage = `❌ Approved successfully, but auto-merge failed: ${mergeError.message}`;
                  
                  // Provide more helpful error messages for common issues
                  if (mergeError.message.includes('Repository rule violations found')) {
                    mergeErrorMessage = `❌ Approved successfully, but cannot auto-merge due to repository rules. This could be due to:
                    - Additional required reviews
                    - Required status checks not passing
                    - Branch protection rules
                    
                    Please ensure all requirements are met and use /merge command if needed.`;
                  } else if (mergeError.message.includes('mergeable')) {
                    mergeErrorMessage = `❌ Approved successfully, but cannot auto-merge: Pull request has conflicts or is not in a mergeable state. Please resolve any conflicts first.`;
                  }
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: mergeErrorMessage
                  });
                }
              }
              
            } catch (error) {
              console.log('Approve error:', error.message);
              
              let errorMessage = `❌ Failed to approve pull request: ${error.message}`;
              
              // Handle specific error cases
              if (error.message.includes('duplicate')) {
                errorMessage = `❌ @${actor}, you have already reviewed this pull request.`;
              } else if (error.message.includes('permission')) {
                errorMessage = `❌ @${actor}, you don't have permission to review this pull request.`;
              } else if (error.status === 422 && error.message.includes('review')) {
                // Try to check if user already has a pending review
                try {
                  const reviews = await github.rest.pulls.listReviews({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber
                  });
                  
                  const userReviews = reviews.data.filter(review => review.user.login === actor);
                  const latestReview = userReviews[userReviews.length - 1];
                  
                  if (latestReview && latestReview.state === 'APPROVED') {
                    errorMessage = `❌ @${actor}, you have already approved this pull request.`;
                  }
                } catch (reviewCheckError) {
                  console.log('Error checking existing reviews:', reviewCheckError.message);
                }
              }
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: errorMessage
              });
              core.setFailed(error.message);
            }
