name: Rerun Workflows Command

on:
  repository_dispatch:
    types: [rerun-command]

permissions:
  contents: read
  actions: write
  issues: write
  pull-requests: write
  checks: write

jobs:
  rerun-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Rerun all workflows for PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if this is a valid slash command dispatch event
            if (!context.payload || !context.payload.client_payload) {
              console.log('‚ùå This workflow should only be triggered by repository dispatch events');
              core.setFailed('Invalid event trigger - expected repository dispatch');
              return;
            }
            
            // Get the actor from the comment author (the person who triggered the slash command)
            const actor = context.payload.client_payload.github.payload.comment.user.login;
            const command = context.payload.client_payload.slash_command.command;
            
            console.log('‚úÖ Slash command detected');
            console.log('Command:', command);
            console.log('Actor:', actor);
            
            // Get issue data from the repository dispatch event
            const issue = context.payload.client_payload.github.payload.issue;
            const issueNumber = issue.number;
            
            if (!issue || !issueNumber) {
              console.log('‚ùå Could not determine issue information');
              core.setFailed('Missing issue information');
              return;
            }
            
            // Check if this is a pull request
            if (!issue.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `‚ùå The /rerun command can only be used on pull requests.`
              });
              core.setFailed('Not a pull request');
              return;
            }
            
            const prNumber = issueNumber;
            
            try {
              // Get PR details
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              if (pr.data.state !== 'open') {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `‚ùå Cannot rerun workflows: Pull request is ${pr.data.state}. Only open pull requests can have workflows rerun.`
                });
                core.setFailed(`PR is ${pr.data.state}`);
                return;
              }
              
              const headSha = pr.data.head.sha;
              const headRef = pr.data.head.ref;
              
              console.log(`PR #${prNumber} head SHA: ${headSha}`);
              console.log(`PR #${prNumber} head ref: ${headRef}`);
              
              // Get all workflow runs for this PR's head SHA
              const workflowRuns = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head_sha: headSha,
                per_page: 100
              });
              
              console.log(`Found ${workflowRuns.data.workflow_runs.length} workflow runs for this PR`);
              
              let rerunCount = 0;
              let approvedCount = 0;
              const rerunResults = [];
              
              // Rerun failed/cancelled workflows and approve waiting ones
              for (const run of workflowRuns.data.workflow_runs) {
                try {
                  console.log(`Processing workflow run ${run.id} (${run.name}) - Status: ${run.status}, Conclusion: ${run.conclusion}`);
                  
                  // Approve workflows that are waiting for approval
                  if (run.status === 'waiting') {
                    try {
                      await github.rest.actions.approveWorkflowRun({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        run_id: run.id
                      });
                      approvedCount++;
                      rerunResults.push(`‚úÖ Approved: ${run.name}`);
                      console.log(`‚úÖ Approved workflow run ${run.id} (${run.name})`);
                    } catch (approveError) {
                      console.log(`‚ö†Ô∏è Could not approve workflow run ${run.id}:`, approveError.message);
                      rerunResults.push(`‚ö†Ô∏è Could not approve: ${run.name} - ${approveError.message}`);
                    }
                  }
                  
                  // Rerun failed, cancelled, or timed out workflows
                  if (run.conclusion === 'failure' || run.conclusion === 'cancelled' || run.conclusion === 'timed_out') {
                    try {
                      await github.rest.actions.reRunWorkflow({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        run_id: run.id
                      });
                      rerunCount++;
                      rerunResults.push(`üîÑ Rerun: ${run.name} (was ${run.conclusion})`);
                      console.log(`üîÑ Rerun workflow ${run.id} (${run.name}) - was ${run.conclusion}`);
                    } catch (rerunError) {
                      console.log(`‚ö†Ô∏è Could not rerun workflow ${run.id}:`, rerunError.message);
                      rerunResults.push(`‚ö†Ô∏è Could not rerun: ${run.name} - ${rerunError.message}`);
                    }
                  } else if (run.conclusion === 'success') {
                    rerunResults.push(`‚úÖ Already passed: ${run.name}`);
                  } else if (run.status === 'in_progress' || run.status === 'queued') {
                    rerunResults.push(`üîÑ Currently running: ${run.name}`);
                  }
                  
                } catch (error) {
                  console.log(`Error processing workflow run ${run.id}:`, error.message);
                  rerunResults.push(`‚ùå Error processing: ${run.name} - ${error.message}`);
                }
              }
              
              // Also trigger new workflow runs by creating a dummy commit status (if needed)
              try {
                // Get all workflows in the repository
                const workflows = await github.rest.actions.listRepoWorkflows({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
                
                // Find workflows that should run on PR events but haven't run yet
                const prWorkflows = workflows.data.workflows.filter(workflow => 
                  workflow.state === 'active' && 
                  (workflow.name.includes('PR') || 
                   workflow.name.includes('Check') || 
                   workflow.name.includes('Test') ||
                   workflow.name.includes('Build') ||
                   workflow.name.includes('Quality'))
                );
                
                // Dispatch repository events to trigger PR workflows
                for (const workflow of prWorkflows) {
                  const hasRun = workflowRuns.data.workflow_runs.some(run => run.workflow_id === workflow.id);
                  if (!hasRun) {
                    rerunResults.push(`üÜï Missing workflow: ${workflow.name} (may need manual trigger)`);
                  }
                }
                
              } catch (workflowListError) {
                console.log('Could not list workflows:', workflowListError.message);
              }
              
              // Create summary comment
              const summary = [
                `üîÑ **Workflow Rerun Summary** by @${actor}`,
                '',
                `**Results:**`,
                `- üîÑ Rerun: ${rerunCount} workflow(s)`,
                `- ‚úÖ Approved: ${approvedCount} workflow(s)`,
                `- üìä Total processed: ${workflowRuns.data.workflow_runs.length} workflow run(s)`,
                '',
                '**Details:**'
              ];
              
              // Add results with proper formatting
              if (rerunResults.length > 0) {
                summary.push(...rerunResults.map(result => `- ${result}`));
              } else {
                summary.push('- No workflows needed attention');
              }
              
              summary.push('');
              summary.push('*Check the Actions tab to see the status of rerun workflows.*');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: summary.join('\n')
              });
              
              console.log(`‚úÖ Successfully processed workflows for PR #${prNumber}`);
              console.log(`Rerun: ${rerunCount}, Approved: ${approvedCount}`);
              
            } catch (error) {
              console.log('Rerun workflows error:', error.message);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `‚ùå Failed to rerun workflows: ${error.message}\n\nPlease check the Actions tab and try again, or contact a maintainer for assistance.`
              });
              core.setFailed(error.message);
            }
