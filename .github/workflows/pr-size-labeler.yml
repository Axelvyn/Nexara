name: PR Size Labeler

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to process'
        required: false
      triggered_by:
        description: 'User who triggered this workflow'
        required: false

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read

jobs:
  size-label:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Check PR size
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { owner, repo } = context.repo;
              const pull_number = context.issue.number;
              
              console.log(`Processing PR #${pull_number} in ${owner}/${repo}`);
              
              // Get PR details
              const pr = await github.rest.pulls.get({
                owner,
                repo,
                pull_number
              });
              
              const additions = pr.data.additions;
              const deletions = pr.data.deletions;
              const changes = additions + deletions;
              
              console.log(`PR has ${changes} total changes (${additions} additions, ${deletions} deletions)`);
              
              // Determine size label
              let sizeLabel;
              if (changes <= 10) {
                sizeLabel = 'size: XS';
              } else if (changes <= 50) {
                sizeLabel = 'size: S';
              } else if (changes <= 200) {
                sizeLabel = 'size: M';
              } else if (changes <= 500) {
                sizeLabel = 'size: L';
              } else {
                sizeLabel = 'size: XL';
              }
              
              console.log(`Determined size label: ${sizeLabel}`);
              
              // Get existing labels
              const existingLabels = await github.rest.issues.listLabelsOnIssue({
                owner,
                repo,
                issue_number: pull_number
              });
              
              console.log(`Existing labels: ${existingLabels.data.map(l => l.name).join(', ')}`);
              
              // Remove existing size labels
              const sizeLabels = existingLabels.data.filter(label => 
                label.name.startsWith('size:')
              );
              
              if (sizeLabels.length > 0) {
                console.log(`Removing existing size labels: ${sizeLabels.map(l => l.name).join(', ')}`);
                for (const label of sizeLabels) {
                  await github.rest.issues.removeLabel({
                    owner,
                    repo,
                    issue_number: pull_number,
                    name: label.name
                  });
                }
              }
              
              // Add new size label (create if it doesn't exist)
              console.log(`Adding label: ${sizeLabel}`);
              try {
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: pull_number,
                  labels: [sizeLabel]
                });
              } catch (labelError) {
                if (labelError.status === 422) {
                  // Label doesn't exist, create it first
                  console.log(`Label ${sizeLabel} doesn't exist, creating it...`);
                  
                  // Define colors for different sizes
                  const colors = {
                    'size: XS': '0e8a16',  // green
                    'size: S': '1d76db',   // blue  
                    'size: M': 'fbca04',   // yellow
                    'size: L': 'f9d0c4',   // orange
                    'size: XL': 'd73a49'   // red
                  };
                  
                  await github.rest.issues.createLabel({
                    owner,
                    repo,
                    name: sizeLabel,
                    color: colors[sizeLabel] || '000000',
                    description: `Pull request size: ${sizeLabel.split(': ')[1]}`
                  });
                  
                  // Try adding the label again
                  await github.rest.issues.addLabels({
                    owner,
                    repo,
                    issue_number: pull_number,
                    labels: [sizeLabel]
                  });
                } else {
                  throw labelError;
                }
              }
              
              console.log(`Successfully applied label: ${sizeLabel}`);
              
            } catch (error) {
              console.error('Error in PR size labeler:', error);
              core.setFailed(`Action failed with error: ${error.message}`);
            }
