name: Close Command

on:
  repository_dispatch:
    types: [close-command]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  close:
    runs-on: ubuntu-latest
    steps:
      - name: Close issue or pull request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if this is a valid slash command dispatch event
            if (!context.payload || !context.payload.client_payload) {
              console.log('‚ùå This workflow should only be triggered by repository dispatch events');
              core.setFailed('Invalid event trigger - expected repository dispatch');
              return;
            }
            
            // Debug: Log the full client payload structure
            console.log('Client payload structure:', JSON.stringify(context.payload.client_payload, null, 2));
            
            // Get the actor from the comment author (the person who triggered the slash command)
            const actor = context.payload.client_payload.github.payload.comment.user.login;
            const command = context.payload.client_payload.slash_command.command;
            const argsObject = context.payload.client_payload.slash_command.args || {};
            
            // Convert args object to array for compatibility
            const args = argsObject.all ? argsObject.all.trim().split(/\s+/).filter(Boolean) : [];
            
            console.log('‚úÖ Slash command detected');
            console.log('Command:', command);
            console.log('Actor:', actor);
            console.log('Args object:', argsObject);
            console.log('Args array:', args);
            
            // Verify we have all required data
            if (!actor) {
              console.log('‚ùå Could not determine actor from payload');
              core.setFailed('Missing actor information');
              return;
            }
            
            // Get issue data from the repository dispatch event
            const issue = context.payload.client_payload.github.payload.issue;
            const issueNumber = issue.number;
            
            if (!issue || !issueNumber) {
              console.log('‚ùå Could not determine issue information');
              core.setFailed('Missing issue information');
              return;
            }
            
            // Check if the issue/PR is already closed
            if (issue.state === 'closed') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `‚ùå This ${issue.pull_request ? 'pull request' : 'issue'} is already closed.`
              });
              core.setFailed('Already closed');
              return;
            }
            
            // Authorization check - only allow repository owners and issue/PR authors
            const authorizedUsers = ['Va16hav07', 'Pranjal6955'];
            const isAuthorized = authorizedUsers.includes(actor) || issue.user.login === actor;
            
            if (!isAuthorized) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `‚ùå @${actor}, you can only close ${issue.pull_request ? 'pull requests' : 'issues'} that you created, or you must be a repository owner.`
              });
              core.setFailed('Unauthorized user');
              return;
            }
            
            // Get optional close message from args
            const closeMessage = args.length > 0 
              ? args.join(' ')
              : `Closed by @${actor} via slash command`;
            
            try {
              // Close the issue or pull request
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed'
              });
              
              // Add a comment explaining why it was closed
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `üîí ${closeMessage}`
              });
              
              console.log(`‚úÖ Successfully closed ${issue.pull_request ? 'PR' : 'issue'} #${issueNumber} by ${actor}`);
              
            } catch (error) {
              console.log('Close error:', error.message);
              
              let errorMessage = `‚ùå Failed to close ${issue.pull_request ? 'pull request' : 'issue'}: ${error.message}`;
              
              // Handle specific error cases
              if (error.message.includes('permission')) {
                errorMessage = `‚ùå @${actor}, you don't have permission to close this ${issue.pull_request ? 'pull request' : 'issue'}.`;
              } else if (error.message.includes('not found')) {
                errorMessage = `‚ùå ${issue.pull_request ? 'Pull request' : 'Issue'} not found or already closed.`;
              }
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: errorMessage
              });
              core.setFailed(error.message);
            }
