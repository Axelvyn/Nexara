name: Build Check

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']
  workflow_dispatch:

jobs:
  frontend-build:
    name: Frontend Build Check
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: frontend
        run: npm ci
      - name: ✅ Dependencies Installed
        if: success()
        run: echo "Frontend dependencies installed successfully ✅"

      - name: Check TypeScript Compilation
        working-directory: frontend
        run: npx tsc --noEmit
      - name: ✅ TypeScript Compilation Passed
        if: success()
        run: echo "TypeScript compilation check passed ✅"

      - name: Build Frontend (Production)
        working-directory: frontend
        run: npm run build
        env:
          NODE_ENV: production
      - name: ✅ Frontend Build Successful
        if: success()
        run: echo "Frontend production build successful ✅"

      - name: Check Build Output Size
        working-directory: frontend
        run: |
          echo "Checking build output size..."
          if [ -d ".next" ]; then
            echo "Build output size:"
            du -sh .next
            echo "Build output contents:"
            ls -la .next
          else
            echo "❌ Build output directory not found"
            exit 1
          fi
      - name: ✅ Build Output Size Check Passed
        if: success()
        run: echo "Build output size check passed ✅"

      # Test case flows have been removed as requested

  backend-build:
    name: Backend Build Check
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: nexara_build_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        working-directory: backend
        run: npm ci
      - name: ✅ Dependencies Installed
        if: success()
        run: echo "Backend dependencies installed successfully ✅"

      - name: Generate Prisma Client
        working-directory: backend
        run: npm run db:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nexara_build_test
      - name: ✅ Prisma Client Generated
        if: success()
        run: echo "Prisma client generated successfully ✅"

      - name: Check Database Connection
        working-directory: backend
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nexara_build_test
      - name: ✅ Database Connection Successful
        if: success()
        run: echo "Database connection successful ✅"

      - name: Build Backend (if build script exists)
        working-directory: backend
        run: |
          if npm run build 2>/dev/null; then
            echo "Backend build script executed successfully"
          else
            echo "No build script found, checking if server can start..."
            node -c server.js && echo "Server syntax check passed"
          fi
      - name: ✅ Backend Build Check Passed
        if: success()
        run: echo "Backend build check passed ✅"

      # Test case flows have been removed as requested

  docker-build:
    name: Docker Build Check
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check for Dockerfile
        run: |
          echo "Checking for Docker configuration files..."
          if [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ] || [ -f "frontend/Dockerfile" ] || [ -f "backend/Dockerfile" ]; then
            echo "Docker configuration found"
            find . -name "Dockerfile*" -o -name "docker-compose*" | head -10
          else
            echo "No Docker configuration found, skipping Docker build check"
            exit 0
          fi

      - name: Build Frontend Docker Image (if Dockerfile exists)
        if: success()
        run: |
          if [ -f "frontend/Dockerfile" ]; then
            echo "Building frontend Docker image..."
            docker build -t nexara-frontend:test ./frontend
            echo "Frontend Docker image built successfully"
          else
            echo "No frontend Dockerfile found"
          fi

      - name: Build Backend Docker Image (if Dockerfile exists)
        if: success()
        run: |
          if [ -f "backend/Dockerfile" ]; then
            echo "Building backend Docker image..."
            docker build -t nexara-backend:test ./backend
            echo "Backend Docker image built successfully"
          else
            echo "No backend Dockerfile found"
          fi

      - name: Build Root Docker Image (if Dockerfile exists)
        if: success()
        run: |
          if [ -f "Dockerfile" ]; then
            echo "Building root Docker image..."
            docker build -t nexara:test .
            echo "Root Docker image built successfully"
          else
            echo "No root Dockerfile found"
          fi

      - name: ✅ Docker Build Check Complete
        if: success()
        run: echo "Docker build check completed ✅"

  build-artifacts:
    name: Build Artifacts Check
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Build Frontend
        working-directory: frontend
        run: npm run build

      - name: Check Frontend Build Artifacts
        working-directory: frontend
        run: |
          echo "Checking frontend build artifacts..."
          if [ -d ".next" ]; then
            echo "Frontend build artifacts found:"
            find .next -type f -name "*.js" -o -name "*.css" -o -name "*.html" | head -20
            echo "Total build artifacts:"
            find .next -type f | wc -l
          else
            echo "❌ No frontend build artifacts found"
            exit 1
          fi

      - name: Check for Source Maps
        working-directory: frontend
        run: |
          echo "Checking for source maps..."
          if find .next -name "*.map" | grep -q .; then
            echo "Source maps found:"
            find .next -name "*.map" | head -10
          else
            echo "⚠️  No source maps found (this is normal for production builds)"
          fi

      - name: Check Bundle Size
        working-directory: frontend
        run: |
          echo "Checking bundle sizes..."
          if [ -d ".next/static/chunks" ]; then
            echo "JavaScript bundle sizes:"
            find .next/static/chunks -name "*.js" -exec ls -lh {} \; | head -10
            echo "CSS bundle sizes:"
            find .next/static/css -name "*.css" -exec ls -lh {} \; | head -10
          fi

      - name: ✅ Build Artifacts Check Complete
        if: success()
        run: echo "Build artifacts check completed ✅"
