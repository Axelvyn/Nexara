name: PR Quality Gate

on:
  pull_request:
    branches: [ main, develop ]
  pull_request_target:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: read

jobs:
  check-changes:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' || github.event_name == 'workflow_dispatch'
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for changes
        id: changes
        run: |
          # Check if frontend files changed
          if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -q "^frontend/"; then
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "Frontend changes detected"
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
            echo "No frontend changes"
          fi
          
          # Check if backend files changed
          if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -q "^backend/"; then
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "Backend changes detected"
          else
            echo "backend=false" >> $GITHUB_OUTPUT
            echo "No backend changes"
          fi

  frontend-gate:
    needs: check-changes
    if: needs.check-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for frontend checks
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const { sha } = context.payload.pull_request.head;
            
            console.log('Waiting for frontend checks to complete...');
            
            let attempts = 0;
            const maxAttempts = 60; // 10 minutes max
            
            while (attempts < maxAttempts) {
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner,
                repo,
                ref: sha
              });
              
              const frontendCheck = checkRuns.check_runs.find(
                run => run.name === 'frontend-checks'
              );
              
              if (frontendCheck) {
                if (frontendCheck.status === 'completed') {
                  if (frontendCheck.conclusion === 'success') {
                    console.log('✅ Frontend checks passed');
                    return;
                  } else {
                    console.log('❌ Frontend checks failed');
                    core.setFailed('Frontend checks failed');
                    return;
                  }
                }
              }
              
              attempts++;
              await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds
            }
            
            core.setFailed('Frontend checks timed out');

  backend-gate:
    needs: check-changes
    if: needs.check-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for backend checks
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const { sha } = context.payload.pull_request.head;
            
            console.log('Waiting for backend checks to complete...');
            
            let attempts = 0;
            const maxAttempts = 60; // 10 minutes max
            
            while (attempts < maxAttempts) {
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner,
                repo,
                ref: sha
              });
              
              const backendCheck = checkRuns.check_runs.find(
                run => run.name === 'backend-checks'
              );
              
              if (backendCheck) {
                if (backendCheck.status === 'completed') {
                  if (backendCheck.conclusion === 'success') {
                    console.log('✅ Backend checks passed');
                    return;
                  } else {
                    console.log('❌ Backend checks failed');
                    core.setFailed('Backend checks failed');
                    return;
                  }
                }
              }
              
              attempts++;
              await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds
            }
            
            core.setFailed('Backend checks timed out');

  quality-gate-summary:
    runs-on: ubuntu-latest
    needs: [check-changes, frontend-gate, backend-gate]
    if: github.event_name == 'pull_request_target' && always()
    steps:
      - name: Quality gate summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const frontendChanged = '${{ needs.check-changes.outputs.frontend-changed }}' === 'true';
            const backendChanged = '${{ needs.check-changes.outputs.backend-changed }}' === 'true';
            const frontendResult = '${{ needs.frontend-gate.result }}';
            const backendResult = '${{ needs.backend-gate.result }}';
            let summary = '## 🔍 PR Quality Gate Summary\n\n';
            if (frontendChanged) {
              if (frontendResult === 'success') {
                summary += '✅ **Frontend checks**: Passed\n';
              } else if (frontendResult === 'failure') {
                summary += '❌ **Frontend checks**: Failed\n';
              } else {
                summary += '⏳ **Frontend checks**: In progress or skipped\n';
              }
            } else {
              summary += 'ℹ️ **Frontend checks**: Skipped (no changes)\n';
            }
            if (backendChanged) {
              if (backendResult === 'success') {
                summary += '✅ **Backend checks**: Passed\n';
              } else if (backendResult === 'failure') {
                summary += '❌ **Backend checks**: Failed\n';
              } else {
                summary += '⏳ **Backend checks**: In progress or skipped\n';
              }
            } else {
              summary += 'ℹ️ **Backend checks**: Skipped (no changes)\n';
            }
            summary += '\n### 📋 Checks Performed:\n';
            summary += '- 🎨 Code formatting (Prettier)\n';
            summary += '- 🔍 Linting (ESLint)\n';
            summary += '- 🏗️ Build verification\n';
            summary += '- 🧪 Tests (if available)\n';
            summary += '- 🔒 Security audit (backend)\n';
            summary += '- 📝 TypeScript type checking\n';
            const prNumber = context.payload.pull_request.number;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('PR Quality Gate Summary')
            );
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: summary
              });
            }
            if ((frontendChanged && frontendResult === 'failure') || 
                (backendChanged && backendResult === 'failure')) {
              core.setFailed('Quality gate failed');
            }
